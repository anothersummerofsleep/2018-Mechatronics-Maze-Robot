{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh15520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <mbed.h>\
#include <SRF05.h>\
#include <stdio.h>\
#include <stdlib.h>\
#include <time.h>\
\
// #define N_DICE 1\
\
SRF05 srf1Right(p11, p12); // Trigger Echo\
SRF05 srf2Left(p13, p14); // Trigger Echo\
SRF05 srf3Front(p15, p16); // Trigger Echo\
\
DigitalOut led1(LED1);  // Left Motor\
DigitalOut led2(LED2);  // Left Motor\
DigitalOut led3(LED3);  // Right Motor\
DigitalOut led4(LED4);  // Right Motor\
AnalogIn aIn(p20); // Analog Input\
\
void ReadDistance(void) \{\
        printf("\\nDistances to obstacles.. \\nRight Sensor = %.1f cm  Left Sensor: %.1f cm Front Sensor: %.1f cm \\n\\r", srf1Right.read(),srf2Left.read(),srf3Front.read()); \
        led1=0;\
        led2=0;\
        led3=0;\
        led4=0;\
    \}\
\
void LeftSensor(void)   \{\
       if (srf2Left.read()<10) \{\
                led1=1; \
                led2=1;\
                led3=1;\
                led4=1;\
            \}\
            \
            else if (srf2Left.read()<15)    \{\
                led1=0;\
                led2=1;\
                led3=1;\
                led4=1;\
            \}\
            \
            else if (srf2Left.read()<20)    \{\
                led1=0;\
                led2=0;\
                led3=1;\
                led4=1;\
            \}\
\
            else if (srf2Left.read()<25)    \{\
                led1=0;\
                led2=0;\
                led3=0;\
                led4=1;\
            \}\
            \
            else  \{\
            led1=0;\
            led2=0;\
            led3=0;\
            led4=0;\
            \} \
        \}\
       \
void RightSensor(void)   \{\
       if (srf1Right.read()<10) \{\
                led1=1; \
                led2=1;\
                led3=1;\
                led4=1;\
            \}\
            \
            else if (srf1Right.read()<15)    \{\
                led1=1;\
                led2=1;\
                led3=1;\
                led4=0;\
            \}\
            \
            else if (srf1Right.read()<20)    \{\
                led1=1;\
                led2=1;\
                led3=0;\
                led4=0;\
            \}\
\
            else if (srf1Right.read()<25)    \{\
                led1=1;\
                led2=0;\
                led3=0;\
                led4=0;\
            \}\
            \
            else  \{\
            led1=0;\
            led2=0;\
            led3=0;\
            led4=0;\
            \} \
        \} \
        \
unsigned int dice(void)\
\{\
    unsigned int iRandom = 0;\
    unsigned int x;\
    \
    for (x = 0; x <= 2; x += 2)\{\
         iRandom += ( (aIn.read_u16() % 3) );\
        wait_ms (1);\
    \}\
    \
    return iRandom;\
\}\
\
int WallCount(void)\
\{\
    int WallCounter = 0;\
    int c;\
    \
    for (c = 0; c<2; c++)\{\
        WallCounter = c;\
        wait_ms (1);\
    \}\
    \
    return WallCounter;\
\}\
\
/* int Logic(void)\
\{\
    Random = iRandom;\
    \
    \
    if(iRandom <2)   \{\
        \
        // Turn Left\
        \
        else if(srf3Front.read()<22==1) \{\
        // Turn 180deg\
        \}\
        \
        else(srf3Front.read()>22==1)    \{\
            // L298HBridge::Fwd()\
            \}\
        \
    \
    if(Random == >2)    \{\
        // Turn Right\
        \}\
    \
    return WallCounter;\
\}   */\
\
/*L298HBridge::L298HBridge(PinName ENPin, PinName FWDPin, PinName REVPin) : _ENPin(ENPin), _FWDPin(FWDPin), _REVPin(REVPin) \{\
    _ENPin = 0;     //PWM = 0%\
    _FWDPin = 0;\
    _REVPin = 0;\
    _ENPin.period(0.020); //set PWM period to 20mS as default.\
\}\
 \
void L298HBridge::Fwd() \{    \
    _FWDPin = 1;\
    _REVPin = 0;\
\}\
\
void L298HBridge::Rev() \{\
    _FWDPin = 0;\
    _REVPin = 1;\
\}\
\
void L298HBridge::Stop() \{\
    _FWDPin = 0;\
    _REVPin = 0;\
\}\
 \
void L298HBridge::Speed(float DutyPercent) \{    \
    _ENPin = DutyPercent /100;\
\} \
\
void L298HBridge::Right() \{    \
    _FWDPin = 1;\
    _REVPin = 0;\
\}\
\
void L298HBridge::Left() \{    \
    _FWDPin = 1;\
    _REVPin = 0;\
\}\
\
\
\
*/\
\
int main() \{\
    \
    int iRandom;\
    int WallCounter; \
    bool Random;\
    \
    //int dice[N_DICE], sum;\
     while(1) \{ \
       \
        ReadDistance(); // call ReadDistance() to print distances read by 3 sensors\
        \
         /*   \
    \
            srand(time(NULL));\
    \
            sum = roll_dice(dice);\
    \
            printf( "Dice: %d",sum); */\
        \
        // First Movement, Count = 1\
         \
         while (srf3Front.read()<22==1) // obstacle right ahead. stop vehicle. \
         \{\
           /* int dice[N_DICE], sum;\
    \
            srand(time(NULL));\
    \
            sum = roll_dice(dice);\
    \
            printf( "Dice: %d",sum);  */\
            \
            // L298HBridge::Stop()\
            \
            L298HBridge::Stop()\
            \
             //Left motor\
             led1=1;   //input 1\
             led2=1;   //intput2\
             //Right motor\
             led3=1;  //input3\
             led4=1;  //input 4                   \
           \
             // roll();\
             \
             WallCounter = WallCount();\
             printf("\\nCount Number: %d", WallCounter);\
             \
             iRandom = dice();\
             printf("\\nNumber: %d", iRandom);\
             \
             \
             \
             \
             \
             break;\
        \}\
        \
        if (srf3Front.read()<70) // obstacle detected ahead. slow down speed \
            \{\
                led1=0; \
                led2=1;\
                led3=1;\
                led4=0;\
            \}\
            \
            else if (srf3Front.read()>70) // no obstacle so move at normal speed\
            \{\
                // L298HBridge::Fwd()\
                \
                led1=1;\
                led2=0;\
                led3=0;\
                led4=1;\
            \}\
          \
          else  \{\
            led1=0;\
            led2=0;\
            led3=0;\
            led4=0;\
            \} \
        \
        LeftSensor();\
        RightSensor();\
\
          \}\
          \
        // wait(0.2); \
\} }